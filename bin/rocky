#!/usr/bin/sh
# -----------------------------------------------------------------------------
#
# -----------------------------------------------------------------------------
#
# NAME
#       rocky   - Getting a Rocky package maintainer build development configuration setup.
#
# REVISION HISTORY
#       04/01/2021    Gregory M. Kurtzer original 
#       04/17/2021    T.J. Yang  merging rocky* commands.
#
# DESCRIPTION
#      TBC.       
#      
#
# RETURN CODE
#       SUCCESS (=0) - script completed successfully
#       ERROR   (=1) - error ... bad things happened
#  REFERENCE:
#   1. https://github.com/rocky-linux/devtools
#
# ---------------------------- CONSTANT DECLARATION ---------------------------
# WHAT: Define PATH.
# WHY:  Mainly for security reasons.

PATH=/bin:/usr/bin:/usr/sbin:/usr/local/bin

# WHAT: Define exit status flags.
# WHY:  Easier to program with a mnemonic than with the numbers.
#
SUCCESS=0
ERROR=1
SRPMPROC=/usr/local/bin/srpmproc
RPMBUILD=`which rpmbuild`
DIFF=`which diff`
MOCK=`which mock`
export SUCCESS ERROR SRPMPROC PATH

#
# ---------------------------- VARIABLE DECLARATION ---------------------------
#
# WHAT: enable oracle tracing.
#
exit_code=${SUCCESS}
err_msg=""
ARCH=`uname -m`

#
# **************************** FUNCTION   ************************************
#

 get(){
NAME="$2"
if [ -z "${NAME}" ]; then
    echo "usage: rocky get NAME"
    echo "usage: $0 $1 $2"
    exit ${exit_code}
fi
if [ -d "${HOME}/rocky/patch/${NAME}.git" ]; then
    echo "NOTICE: Will merge local configs into pulled package"
    ( cd "${HOME}/rocky/patch/${NAME}.git"; git add .; git commit -m "update" ) ||:
fi
test -d "$HOME/rocky/rpms/${NAME}" && rm -rf "$HOME/rocky/rpms/${NAME}"
test -d /tmp/srpmproc-cache || mkdir /tmp/srpmproc-cache
mkdir -p "$HOME/rocky/rpms/${NAME}"
${SRPMPROC} --version 8 --upstream-prefix "file://$HOME/rocky" --storage-addr file:///tmp/srpmproc-cache --source-rpm "$NAME" --tmpfs-mode "$HOME/rocky/rpms/${NAME}"
echo "Package has been pulled to: $HOME/rocky/rpms/${NAME} by srpmproc"
 }

 build()
 {
     	NAME="$2"
	BRANCH="$3"
	MODULE="$4"
	
	if [ -z "$NAME" ]; then
	    echo "USAGE: $0 [PACKAGE NAME] [BRANCH]"
	    exit {$ERROR}
	else
	    shift
	fi
	
	if [ -z "$BRANCH" ]; then
	    BRANCH="r8"
	else
	    shift
	fi
	
	
	if [ -z "$MODULE" ]; then
	    MOCKCONFIG="/etc/mock/rocky.$ARCH/baseos.cfg"
	else
	    if [ -f "/etc/mock/rocky.$ARCH/modules/$MODULE.cfg" ]; then
	        MOCKCONFIG="/etc/mock/rocky.$ARCH/modules/$MODULE.cfg"
	        shift
	    else
	        echo "ERROR: Could not find module config for: '$MODULE'"
	        exit 255
	    fi
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}" ]; then
	    echo "Importing package: ${NAME}"
	    if ! rockyget "${NAME}"; then
	        echo "Failed to import package: ${NAME}"
	        exit 255
	    fi
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}/${BRANCH}" ]; then
	    echo "This package branch does not exist."
	    exit 255
	fi
	    
	test -d "${HOME}/rocky/builds/${NAME}/${BRANCH}" || mkdir -p "${HOME}/rocky/builds/${NAME}/${BRANCH}"
	set -e
	createrepo /usr/share/nginx/html/repo
	#cd "${HOME}/rocky/rpms/${NAME}/${BRANCH}"
	${RPMBUILD} -bs --nodeps --define "%_topdir ${HOME}/rocky/rpms/${NAME}/${BRANCH}" --define "dist .el8" "${HOME}/rocky/rpms/${NAME}/${BRANCH}/SPECS/${NAME}.spec"
	${MOCK} -r "$MOCKCONFIG" --resultdir="${HOME}/rocky/builds/${NAME}/${BRANCH}" ${HOME}/rocky/rpms/${NAME}/${BRANCH}/SRPMS/${NAME}*.src.rpm --isolation=simple --cleanup-after ${MOCKARGS:-}
	cp ${HOME}/rocky/builds/${NAME}/${BRANCH}/*.rpm ${HOME}/rocky/rpms/${NAME}/${BRANCH}/SRPMS/*.src.rpm /usr/share/nginx/html/repo/
	createrepo /usr/share/nginx/html/repo

 }
 prep()
 {
	set -e
	NAME="$2"
	BRANCH="$3"
	
	if [ -z "$NAME" ]; then
	    echo "USAGE: $0 prep [PACKAGE NAME] [BRANCH]"
	    exit {$ERROR}
	else
	    shift
	fi
	
	if [ -z "$BRANCH" ]; then
	    BRANCH="r8"
	else
	    shift
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}" ]; then
	    echo "ERROR: Package name not found: ${NAME}"
	    exit 255
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}/${BRANCH}" ]; then
	    echo "ERROR: Package branch not found: ${NAME}/${BRANCH}"
	    exit 255
	fi
	
	
	test -d "${HOME}/rocky/_work/${NAME}/${BRANCH}" && rm -rf "${HOME}/rocky/_work/${NAME}/${BRANCH}"
	mkdir -p "${HOME}/rocky/_work/${NAME}/${BRANCH}"
	
	if [ ! -d "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG" ]; then
	    mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG"
	    mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/_supporting"
	    ( cd "$HOME/rocky/patch/${NAME}.git" && git init && git checkout -b main )
	fi
	
	${RPMBUILD} -bp --nodeps --define "%_topdir ${HOME}/rocky/rpms/${NAME}/${BRANCH}" --define "_builddir ${HOME}/rocky/_work/${NAME}/${BRANCH}" --define "dist .el8" ${HOME}/rocky/rpms/${NAME}/${BRANCH}/SPECS/*.spec
	echo "Created ${HOME}/rocky/_work/${NAME}/${BRANCH}/"
     
 }
 patch()
 {
	set -e
	NAME=`pwd | sed -e "s@^$HOME/rocky/_work/@@" | awk -F '/' '{print $1}'`
	BRANCH=`pwd | sed -e "s@^$HOME/rocky/_work/@@" | awk -F '/' '{print $2}'`
	PATCHNAME="$2"
	
	if [ -z "$NAME" -o -z "$BRANCH" ]; then
	    echo "Directory structure doesn't seem to be a Rocky _workdir"
	fi
	
	if [ -z "$PATCHNAME" ]; then
	    echo "USAGE: $0 [PATCH NAME]"
	    exit {$ERROR}
	else
	    shift
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}" ]; then
	    echo "ERROR: Package name not found: ${NAME}"
	    exit 255
	fi
	
	if [ ! -d "${HOME}/rocky/rpms/${NAME}/${BRANCH}" ]; then
	    echo "ERROR: Package branch not found: ${NAME}/${BRANCH}"
	    exit 255
	fi
	
	
	test -d "${HOME}/rocky/_work/${NAME}/${BRANCH}/.patchdir" && rm -rf "${HOME}/rocky/_work/${NAME}/${BRANCH}/.patchdir"
	mkdir -p "${HOME}/rocky/_work/${NAME}/${BRANCH}/.patchdir"
	
	if [ ! -d "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG" ]; then
	    mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG"
	    mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/_supporting"
	    ( cd "$HOME/rocky/patch/${NAME}.git" && git init && git checkout -b main )
	fi
	
	${RPMBUILD} -bp --nodeps --define "%_topdir ${HOME}/rocky/rpms/${NAME}/${BRANCH}" --define "_builddir ${HOME}/rocky/_work/${NAME}/${BRANCH}/.patchdir" --define "dist .el8" ${HOME}/rocky/rpms/${NAME}/${BRANCH}/SPECS/*.spec
	
	cd "${HOME}/rocky/_work/${NAME}/${BRANCH}/.patchdir"
	
	mv * a
	ln -s ${HOME}/rocky/_work/${NAME}/${BRANCH}/* b
	
	set +e
	
	${DIFF} -ru a b > "$HOME/rocky/patch/${NAME}.git/ROCKY/_supporting/$PATCHNAME"
	if [ $? -gt "1" ]; then
	    echo "ERROR: ${DIFF} failed"
	    exit 255
	fi
	
cat <<EOF>> "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG/$NAME.cfg"
add {
    file: "ROCKY/_supporting/$PATCHNAME"
}

spec_change {
    # Adds a Patch line with the file name as listed above
    file {
        name: "$PATCHNAME"
        type: Patch
        add: true
        add_to_prep: true
        n_path: 1 
    }
}
EOF
	
	( cd "${HOME}/rocky/patch/${NAME}.git"; git add .; git commit -m "Add patch: $PATCHNAME" ) ||:
	
	cd ..
	rm -rf ".patchdir"
	
	echo "Regetting '${NAME}' to integrate patch..."
	rocky get ${NAME}
     
 }
 mkcfg()
 {
	NAME="$2"
	
	if [ -z "$NAME" ]; then
	    echo "USAGE: $0 mkcfg [PACKAGE NAME]"
	    exit {$ERROR}
	fi
	
	if [ -d "$HOME/rocky/patch/${NAME}.git" ]; then
	    echo "Patch structure already exists at: $HOME/rocky/patch/${NAME}.git"
	    exit
	fi
	
	set -e
	
	mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/CFG"
	mkdir -p "$HOME/rocky/patch/${NAME}.git/ROCKY/_supporting"
	cd "$HOME/rocky/patch/${NAME}.git"
	git init
	git checkout -b main
	
	echo "Rocky patch directory created for package '${NAME}' and can be found in:"
	echo "   $HOME/rocky/patch/${NAME}.git"
	echo
	echo "Once you have added/changed your files, be sure to 'git' commit your changes."
	echo
	
	if [ -d "${HOME}/rocky/rpms/${NAME}" ]; then
	    echo "WARNING: You will have to rerun 'rockyget ${NAME}' to test"
	fi
     
 }

#
# **************************** MAIN SCRIPT ************************************
#

# WHAT: Verify running  as root
# WHY:  Must be logged in as root user (in case of manual operation).
#
#if [ ${exit_code} -eq ${SUCCESS} ]; then
#    x=`id | sed -e 's/uid=\([0-9][0-9]*\)\(.*\)$/\1/'`
#    if [ ${x} -ne 0 ]; then
#	echo "ERROR:   Must be superuser (root) to execute this script." 1>&2
#	exit_code=${ERROR}
#	exit ${exit_code}
#    fi
#fi
#
# WHAT: Issue error message if no script action is specified
# WHY:  at least of  star/stop/status action is needed
#

if [ $# -eq  0  ]; then
    echo "ERROR:  $0 {get NAME|build NAME |prep NAME |patch NAME |mkcfg NAME |help}" 1>&2
    echo "Ex:  $0 get sed to retrieve sed SRPM" 1>&2
    exit_code=${ERROR}
    exit ${exit_code}
fi

case $1 in
    get)
	get $1 $2
	;;
    build)
        build $1 $2 $3 $4
	;;
    prep)
        prep $1 $2 $3
	;;
    patch)
	patch $1 $2
	;;
    mkcfg)
	mkcfg $1 $2
	;;
    help)
	echo "$0 get   sed : get sed srpm locally via srpmproc."
	echo "$0 build sed : build sed srpm in local mock."
	echo "$0 patch sed : patching sed."
	echo "$0 mkcfg sed : patching sed."
	;;
    *)
	echo "ERROR:  $0 {get|build|prep|patch|mkcfg|help}" 1>&2
	exit ${ERROR}
	;;
    esac
